
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.25.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace Zensurrechner_Console
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json;
    using Terminal.Gui;

    public class NotenSpeicherung
    {
        public Dictionary<string, object>? Classname { get; set; }
        public string? Klassenname { get; set; }
        public int SummeAllerNoten { get; set; }
        public int AnzahlAnNoten { get; set; }
        public int AnzahlAnNote1 { get; set; }
        public int AnzahlAnNote2 { get; set; }
        public int AnzahlAnNote3 { get; set; }
        public int AnzahlAnNote4 { get; set; }
        public int AnzahlAnNote5 { get; set; }
        public int AnzahlAnNote6 { get; set; }
        public float Durchschnitt { get; set; }
    }
    public partial class addnoten
    {

        public addnoten()
        {
            InitializeComponent();

            //def new strings
            int sum1N = 0;
            int sum2N = 0;
            int sum3N = 0;
            int sum4N = 0;
            int sum5N = 0;
            int sum6N = 0;
            string stop = "";

            solve_btn.Clicked += async () =>
            {



                bool dontstop = true;
                string ClassName = class_input.Text.ToString();
                if (ClassName == null || ClassName == "" || ClassName == " ")
                {
                    dontstop = false;
                    MessageBox.ErrorQuery("ERROR", "FormatException", "OK");
                }

                


                    string pointsstring;
                    pointsstring = (string)points_input.Text;

                    int pointsint = 0;
                    //formation string in int
                    //For points
                    try
                    {
                        
                        pointsint = Convert.ToInt32(pointsstring);
                        // calc Note
                        int noteint = 0;

                        if (pointsint >= 10 && pointsint < 15)
                        {
                            noteint = 1;
                            sum1N++;
                        }
                        if (pointsint < 10 && pointsint >= 8)
                        {
                            noteint = 2;
                            sum2N++;
                        }
                        if (pointsint < 8 && pointsint >= 7)
                        {
                            noteint = 3;
                            sum3N++;
                        }
                        if (pointsint < 7 && pointsint >= 5)
                        {
                            noteint = 4;
                            sum4N++;
                        }
                        if (pointsint < 5 && pointsint >= 3)
                        {
                            noteint = 5;
                            sum5N++;
                        }
                        if (pointsint < 3 && pointsint >= 0)
                        {
                            noteint = 6;
                            sum6N++;
                        }
                        if (pointsint >= 15 || pointsint < 0)
                        {

                            MessageBox.ErrorQuery("ERROR", "FormatException", "OK");
                            
                        }
                        if (pointsint >= 0 && pointsint < 15)
                        {

                            note1output.Text = sum1N.ToString();
                            note2output.Text = sum2N.ToString();
                            note3output.Text = sum3N.ToString();
                            note4output.Text = sum4N.ToString();
                            note5output.Text = sum5N.ToString();
                            note6output.Text = sum6N.ToString();

                            int summe = sum1N + sum2N + sum3N + sum4N + sum5N + sum6N;
                            int summe2 = sum1N * 1 + sum2N * 2 + sum3N * +sum4N * 4 + sum5N * 5 + sum6N * 6;
                            labelSummeNoten.Text = summe.ToString();
                            float durchschnitt;

                            durchschnitt = (float)summe2 / summe;
                            Math.Round((double)durchschnitt, 2);

                            durchschnittOutput.Text = durchschnitt.ToString();

                            var notenspeicherung = new NotenSpeicherung
                            {

                                /*Classname = new Dictionary<string, >
                                {*/
                                Klassenname = ClassName,
                                SummeAllerNoten = summe2,
                                AnzahlAnNote1 = sum1N,
                                AnzahlAnNote2 = sum2N,
                                AnzahlAnNote3 = sum3N,
                                AnzahlAnNote4 = sum4N,
                                AnzahlAnNote5 = sum5N,
                                AnzahlAnNote6 = sum6N,
                                AnzahlAnNoten = summe,
                                Durchschnitt = durchschnitt
                                // }

                            };
 
                        save_btn.Clicked += async () =>
                        {
                            string fileName = "notensumme.json";
                            using FileStream createStream = File.Create(fileName);
                            var options = new JsonSerializerOptions { WriteIndented = true };
                            await JsonSerializer.SerializeAsync(createStream, notenspeicherung, options);
                            await createStream.DisposeAsync();
                            Console.WriteLine(File.ReadAllText(fileName));
                            createStream.Close();
                        };
                    }





                    
                }
                    catch (FormatException e)
                    { MessageBox.ErrorQuery("ERROR", e.ToString(), "OK"); }
                    catch (OverflowException e)
                    { MessageBox.ErrorQuery("ERROR", e.ToString(), "OK"); }
                };

            close_btn.Clicked += () => Application.RequestStop();
            
        }

    }
}
